using System.Collections.Generic;

using EightPuzzleSolver.Models;
using EightPuzzleSolver.ViewModels;

namespace EightPuzzleSolver.Algorithms;
/// <summary>
/// Pathfinder 
/// </summary>
internal abstract class PathFinder {
	#region Attributes
	protected IEnumerable<CellModel>? pendingVertices;
	protected List<CellModel> visitedVertices;
	#endregion
	#region Constructors
	/// <summary>
	/// Creates a pathfinder
	/// </summary>
	public PathFinder() => this.visitedVertices = new();
	#endregion
	#region Methods
	/// <summary>
	/// Solves the board
	/// </summary>
	/// <param name="board">Root board</param>
	/// <param name="zeroX">Root zero cell row position</param>
	/// <param name="zeroY">Root zero cell column position</param>
	/// <returns></returns>
	public abstract (List<CellModel>, int, int) Solve(List<CellModel> board, int zeroX, int zeroY);
	/// <summary>
	/// Generate as much movements as possible
	/// </summary>
	/// <param name="state">Board state</param>
	/// <returns>All possible board combinations generated by the valid moves</returns>
	protected static List<State> MakePossibleMovements(State state) {
		List<State> states = new();
		if (state.ZeroX > 0) { // Check up
			(var board, int zeroX, int zeroY) = CellViewModel.MoveZeroCell(state.Board, state.ZeroX, state.ZeroY, Direction.Up);
			if (board is not null) {
				states.Add(new State(board, zeroX, zeroY));
			}
		}
		if (state.ZeroX < 2) { // Check down
			(var board, int zeroX, int zeroY) = CellViewModel.MoveZeroCell(state.Board, state.ZeroX, state.ZeroY, Direction.Down);
			if (board is not null) {
				states.Add(new State(board, zeroX, zeroY));
			}
		}
		if (state.ZeroY > 0) { // Check left
			(var board, int zeroX, int zeroY) = CellViewModel.MoveZeroCell(state.Board, state.ZeroX, state.ZeroY, Direction.Left);
			if (board is not null) {
				states.Add(new State(board, zeroX, zeroY));
			}
		}
		if (state.ZeroY < 2) { // Check right
			(var board, int zeroX, int zeroY) = CellViewModel.MoveZeroCell(state.Board, state.ZeroX, state.ZeroY, Direction.Right);
			if (board is not null) {
				states.Add(new State(board, zeroX, zeroY));
			}
		}
		return states;
	}
	#endregion
}